
http://codeblocks.org/downloads

Code::Blocks - The IDE with all the features you need, having a consistent look, feel and operation across platforms.

https://ocw.mit.edu/courses/mathematics/18-s096-topics-in-mathematics-with-applications-in-finance-fall-2013/related-resources/

http://www.cplusplus.com/reference/cmath/expm1/

https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp1_Basics.html

https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp4_PointerReference.html

/* References vs. Pointers (TestReferenceVsPointer.cpp) */
#include <iostream>
using namespace std;
 
int main() {
   int number1 = 88, number2 = 22;
 
   // Create a pointer pointing to number1
   int * pNumber1 = &number1;  // Explicit referencing
   *pNumber1 = 99;             // Explicit dereferencing
   cout << *pNumber1 << endl;  // 99
   cout << &number1 << endl;   // 0x22ff18
   cout << pNumber1 << endl;   // 0x22ff18 (content of the pointer variable - same as above)
   cout << &pNumber1 << endl;  // 0x22ff10 (address of the pointer variable)
   pNumber1 = &number2;        // Pointer can be reassigned to store another address
 
   // Create a reference (alias) to number1
   int & refNumber1 = number1;  // Implicit referencing (NOT &number1)
   refNumber1 = 11;             // Implicit dereferencing (NOT *refNumber1)
   cout << refNumber1 << endl;  // 11
   cout << &number1 << endl;    // 0x22ff18
   cout << &refNumber1 << endl; // 0x22ff18
   //refNumber1 = &number2;     // Error! Reference cannot be re-assigned
                                // error: invalid conversion from 'int*' to 'int'
   refNumber1 = number2;        // refNumber1 is still an alias to number1.
                                // Assign value of number2 (22) to refNumber1 (and number1).
   number2++;   
   cout << refNumber1 << endl;  // 22
   cout << number1 << endl;     // 22
   cout << number2 << endl;     // 23
}
A reference variable provides a new name to an existing variable. It is dereferenced implicitly and does not need
the dereferencing operator * to retrieve the value referenced. On the other hand, a pointer variable stores an address. 
You can change the address value stored in a pointer. To retrieve the value pointed to by a pointer, you need to use 
the indirection operator *, which is known as explicit dereferencing. Reference can be treated as a const pointer. 
It has to be initialized during declaration, and its content cannot be changed.

Reference is closely related to pointer. In many cases, it can be used as an alternative to pointer.
A reference allows you to manipulate an object using pointer, but without the pointer syntax of referencing 
and dereferencing.

The above example illustrates how reference works, but does not show its typical usage, which is used as the function
formal parameter for pass-by-reference.

2.4  Pass-By-Reference into Functions with Reference Arguments vs. Pointer Argument

END:

#include <iostream>
#include <cmath>
#include <stdio.h>

using namespace std;

int main()
{
    cout << 5942.5 * 2.7182 << endl;
    cout << 5942.5 * 2.7182 << endl;
    cout << 5942.5 * 2.7182 << endl;
    cout << 10.0 / 3.0 << endl;
    cout << 10.0 + 3.0 << endl;
    cout << 10.0 - 3.0 << endl;
    cout << pow (3, 3) << endl;
    cout << sqrt (1000) << endl;
    cout << hypot (3, 4) << endl;
    cout << cos (6.000000)  << endl;
    cout << sin (60.000000)  << endl;
    cout << tan (45.000000)  << endl;


    return 0;

}


C++ Code //Variables  http://www.cplusplus.com/doc/tutorial/     

#include <iostream>

using namespace std;

int main()
{

    string  characterName = "John";
    int characterAge;
    characterAge = 35;
    cout << "There was once a man named" << characterName << endl;
    cout << "He was" << characterAge << "years old" << endl;
    cout << "He liked the name" << characterName << endl;
    cout << "But he did not like" << characterAge << endl;

    return 0;
}

20181207

https://www.youtube.com/watch?v=mUQZ1qmKlLY&t=70s

#include <iostream>

using namespace std;

int main()
{

    int a;
    int b;
    int sum;

    cout << "Enter a Number User! \n";
    cin >> a;

    cout << "Enter another Number! \n";
    cin >> b;

    sum = a + b;
    cout << "the sum of those numbers is" << sum << endl;


    return 0;
}

20181207

/**The tangent of 45.000000 degrees is 1.000000.*/
/* tan example */
#include <stdio.h>      /* printf */
#include <math.h>       /* tan */

#define PI 3.14159265

int main ()
{
  double param, result;
  param = 30.0;
  result = tan ( param * PI / 180.0 );
  printf ("The tangent of %f degrees is %f.\n", param, result );
  return 0;
}

Pointers Memory

#include <iostream>

using namespace std;

int main()
{
    int age = 20;
    int *pAge = &age;
    double gpa = 2.7;
    double *pGpa = &gpa;
    string name = "Mike";
    string *pName = &name;

    cout << &*&gpa;

    cout << &*&age;

    cout << &*&name;

    return 0;
}

20181215

// array::back
#include <iostream>
#include <array>

int main ()
{
  std::array<int,3> myarray = {5, 19, 77};

  std::cout << "front is: " << myarray.front() << std::endl;   // 5
  std::cout << "back is: " << myarray.back() << std::endl;     // 77

  myarray.back() = 50;

  std::cout << "myarray now contains:";
  for ( int& x : myarray ) std::cout << ' ' << x;
  std::cout << '\n';

  return 0;
}

Output:
front is: 5
back is: 77
myarray now contains: 5 19 50

20181216

https://www.programiz.com/cpp-programming/multidimensional-arrays

#include <iostream>
using namespace std;

int main()
{
    // This array can store upto 12 elements (2x3x2)
    int test[2][3][2];

    cout << "Enter 12 values: \n";

    // Inserting the values into the test array
    // using 3 nested for loops.
    for(int i = 0; i < 2; ++i)
    {
        for (int j = 0; j < 3; ++j)
        {
            for(int k = 0; k < 2; ++k )
            {
                cin >> test[i][j][k];
            }
        }
    }

    cout<<"\nDisplaying Value stored:"<<endl;

    // Displaying the values with proper index.
    for(int i = 0; i < 2; ++i)
    {
        for (int j = 0; j < 3; ++j)
        {
            for(int k = 0; k < 2; ++k)

                {
                cout << "test[" << i << "][" << j << "][" << k << "] = " << test[i][j][k] << endl;
            }
        }
    }

    return 0;
}


OutPut

Enter 12 values: 
1
2
3
4
5
6
7
8
9
10
11
12

Displaying Value stored:
test[0][0][0] = 1
test[0][0][1] = 2
test[0][1][0] = 3
test[0][1][1] = 4
test[0][2][0] = 5
test[0][2][1] = 6
test[1][0][0] = 7
test[1][0][1] = 8
test[1][1][0] = 9
test[1][1][1] = 10
test[1][2][0] = 11
test[1][2][1] = 12

As the number of dimension increases, the complexity also increases tremendously although the concept is quite similar.

Example: Multiply two matrices without using functions.

#include <iostream>
using namespace std;

int main()
{
    int a[10][10], b[10][10], mult[10][10], r1, c1, r2, c2, i, j, k;

    cout << "Enter rows and columns for first matrix: ";
    cin >> r1 >> c1;
    cout << "Enter rows and columns for second matrix: ";
    cin >> r2 >> c2;

    // If column of first matrix in not equal to row of second matrix,
    // ask the user to enter the size of matrix again.
    while (c1!=r2)
    {
        cout << "Error! column of first matrix not equal to row of second.";

        cout << "Enter rows and columns for first matrix: ";
        cin >> r1 >> c1;

        cout << "Enter rows and columns for second matrix: ";
        cin >> r2 >> c2;
    }

    // Storing elements of first matrix.
    cout << endl << "Enter elements of matrix 1:" << endl;
    for(i = 0; i < r1; ++i)
        for(j = 0; j < c1; ++j)
        {
            cout << "Enter element a" << i + 1 << j + 1 << " : ";
            cin >> a[i][j];
        }

    // Storing elements of second matrix.
    cout << endl << "Enter elements of matrix 2:" << endl;
    for(i = 0; i < r2; ++i)
        for(j = 0; j < c2; ++j)
        {
            cout << "Enter element b" << i + 1 << j + 1 << " : ";
            cin >> b[i][j];
        }

    // Initializing elements of matrix mult to 0.
    for(i = 0; i < r1; ++i)
        for(j = 0; j < c2; ++j)
        {
            mult[i][j]=0;
        }

    // Multiplying matrix a and b and storing in array mult.
    for(i = 0; i < r1; ++i)
        for(j = 0; j < c2; ++j)
            for(k = 0; k < c1; ++k)
            {
                  mult[i][j] += a[i][k] * b[k][j];
            }

    // Displaying the multiplication of two matrix.
    cout << endl << "Output Matrix: " << endl;
    for(i = 0; i < r1; ++i)
    for(j = 0; j < c2; ++j)
    {
        cout << " " << mult[i][j];
        if(j == c2-1)
            cout << endl;
    }

    return 0;
}

Output

Enter rows and column for first matrix: 3
2
Enter rows and column for second matrix: 3
2
Error! column of first matrix not equal to row of second.

Enter rows and column for first matrix: 2
3
Enter rows and column for second matrix: 3
2

Enter elements of matrix 1:
Enter elements a11: 3
Enter elements a12: -2
Enter elements a13: 5
Enter elements a21: 3
Enter elements a22: 0
Enter elements a23: 4                  (13)

Enter elements of matrix 2:
Enter elements b11: 2
Enter elements b12: 3
Enter elements b21: -9
Enter elements b22: 0
Enter elements b31: 0
Enter elements b32: 4                  (0)

Output Matrix:
24 29
6  25

       C1      C2     C3     C4       C5       C6        C7       C8        C9        C10

R1  x[0][0] x[0][1] x[0][2] x[0][3]  x[0][4]  x[0][5]  x[0][6]   x[0][7]   x[0][8]  x[0][9]


R2  x[1][0] x[1][1] x[1][2] x[1][3]  x[1][4]                                        x[1][9]


R3  x[2][0] x[2][1] x[2][2] x[2][3]  x[2][4]                                        x[2][9]


R4  x[3][0]                                                                         x[3][9]


R5  x[4][0]                                                                         x[4][9]


R6  x[5][0]


R7  x[6][0]


R8  x[7][0]


R9  x[8][0]


R10 x[9][0]                                                                          x[9][9]

Example: Add Two Matrices using Multi-dimensional Arrays

#include <iostream>
using namespace std;

int main()
{
    int r, c, a[100][100], b[100][100], sum[100][100], i, j;

    cout << "Enter number of rows (between 1 and 100): ";
    cin >> r;

    cout << "Enter number of columns (between 1 and 100): ";
    cin >> c;

    cout << endl << "Enter elements of 1st matrix: " << endl;

    // Storing elements of first matrix entered by user.
    for(i = 0; i < r; ++i)
       for(j = 0; j < c; ++j)
       {
           cout << "Enter element a" << i + 1 << j + 1 << " : ";
           cin >> a[i][j];
       }

    // Storing elements of second matrix entered by user.
    cout << endl << "Enter elements of 2nd matrix: " << endl;
    for(i = 0; i < r; ++i)
       for(j = 0; j < c; ++j)
       {
           cout << "Enter element b" << i + 1 << j + 1 << " : ";
           cin >> b[i][j];
       }

    // Adding Two matrices
    for(i = 0; i < r; ++i)
        for(j = 0; j < c; ++j)
            sum[i][j] = a[i][j] + b[i][j];

    // Displaying the resultant sum matrix.
    cout << endl << "Sum of two matrix is: " << endl;
    for(i = 0; i < r; ++i)
        for(j = 0; j < c; ++j)
        {
            cout << sum[i][j] << "  ";
            if(j == c - 1)
                cout << endl;
        }

    return 0;
}


Output

Enter number of rows (between 1 and 100): 2
Enter number of columns (between 1 and 100): 2

Enter elements of 1st matrix:
Enter element a11: -4
Enter element a12: 5
Enter element a21: 6
Enter element a22: 8

Enter elements of 2nd matrix:
Enter element b11: 3
Enter element b12: -9
Enter element b21: 7
Enter element b22: 2

Sum of two matrix is:
-1   -4
13   10

20181222

Example: Store Information in Structure and Display it

#include <iostream>
using namespace std;

struct student
{
    char name[50];
    int roll;
    float marks;
} s[10];

int main()
{
    cout << "Enter information of students: " << endl;

    // storing information
    for(int i = 0; i < 10; ++i)
    {
        s[i].roll = i+1;
        cout << "For roll number" << s[i].roll << "," << endl;

        cout << "Enter name: ";
        cin >> s[i].name;

        cout << "Enter marks: ";
        cin >> s[i].marks;

        cout << endl;
    }

    cout << "Displaying Information: " << endl;
    
    // Displaying information
    for(int i = 0; i < 10; ++i)
    {
        cout << "\nRoll number: " << i+1 << endl;
        cout << "Name: " << s[i].name << endl;
        cout << "Marks: " << s[i].marks << endl;
    }

    return 0;
}

Output

Enter information of students: 

For roll number1,
Enter name: Tom
Enter marks: 98

For roll number2,
Enter name: Jerry
Enter marks: 89
.
.
.
Displaying Information:

Roll number: 1
Name: Tom
Marks: 98
.
.
.

20181222

https://www.programiz.com/cpp-programming/multidimensional-arrays

http://www.cplusplus.com/reference/string/to_wstring/

Structure Financial Modeling CRYPTO's...........

Example: Store Information in Structure and Display it...

#include <iostream>       // std::wcout
#include <string>         // std::wstring, std::to_wstring
using namespace std;

struct "CRYPTO Currencies Ledger Customer Account!"
{
    char name[50];
    int roll;
    float ids;
    float txs;
    float cellph;
    string email;
} s[1];

int main()
{
    cout << "Enter information of CRYPTO Currencies Ledger Customer Account!: " << endl;

    // storing information
    for(int i = 0; i < 1; ++i)
    {
        s[i].roll = i+1;
        cout << "For roll number" << s[i].roll << "," << endl;

        cout << "Enter name: ";
        cin >> s[i].name;

        cout << "Enter ids: ";
        cin >> s[i].ids;

        cout << "Enter txs:";
        cin >> s[i].txs;
 
        cout << "Enter cellph:";
        cin >> s[i].cellph; 

        cout << "Enter email:";
        cin >> s[i].email;
        

        cout << endl;
    }

    cout << "Displaying Information: " << endl;

    // Displaying information
    for(int i = 0; i < 1; ++i)
    {
        cout << "\nRoll number: " << i+1 << endl;
        cout << "Name: " << s[i].name << endl; 
        cout << "IDS: " << s[i].ids << endl;
        cout << "TXS:" << s[i] .txs << endl;
        cout << "Cellph:" << s[i].cellph << end1;
        cout << "Email:" << s[i].email << end1;
        cout << "CRYPTO Currencies Ledger!" << endl;
        cout << "WorldVisionVirtualBank = (('WvvbBalance'),(1000000000-1000000))!" << end1;
        cout << "Array1(10r/10c)/Container1/100 = (('Cont1balance'),(1000000-10000))!" << end1;<<
        cout << "Acttrec1x100 = (('Acttr1x100balance'), (10000*1))!" << end1;
        cout << "Acttpay1x100 = (('Acttp1x100balance'), (10000-3000))!" << end1;
        cout << "Acttbal1x100 = (('Acttb1x100balance'), (1000000-10000+7000),(10000-3000))!" << end1;
        cout << "Update Master Ledger WVVB!" << end1;
        cout << "print(WorldVisionVirtualBank, Array1/Container1, Acttrec1x100, Acttpay1x100, Acttbal1x100)!" << end1;
 
    }

    return 0;
}


Output:

        cout << "\nRoll number: " << i+1 << endl;
        cout << "Name: " << s[i].name << endl;
        cout << "IDS: " << s[i].ids << endl;
        cout << "TXS:" << s[i] .txs << endl;
        cout << "Cellph:" << s[i].cellph << end1;
        cout << "CRYPTO Currencies Ledger!" << endl;

       WorldVisionVirtualBank = (('WvvbBalance'),(1000000000-1000000))    
       Container1 = (('Cont1balance'),(1000000-10000))                   
       Acttrec1x100 = (('Acttr1x100balance'), (10000*1))              
       Acttpay1x100 = (('Acttp1x100balance'), (10000-3000))            
       Acttbal1x100 = (('Acttb1x100balance'), (1000000-10000+7000),(10000-3000))
       print(WorldVisionVirtualBank, Container1, Acttrec1x100, Acttpay1x100, Acttbal1x100)

Example 1: Two Dimensional Array

"Virtual Universe, Registered Byte Particle Element", a universe, registered byte particle element, 
that can never be directly detected, but whose existence does have measurable "Store of unit value"(souv) effects. 
Quote: "Stephen Hawking's"

C++ Program to display all elements of an initialised two dimensional array.

https://www.programiz.com/cpp-programming/multidimensional-arrays

#include <iostream>
using namespace std;

int main()
{
    int number;
    int test[10][10] =
    {
        {1,2,3,4,5,6,7,8,9,10},
        {11,12,13,14,15,16,17,18,19,20},
        {21,22,23,24,25,26,27,28,29,30},
        {31,32,33,34,35,36,37,38,39,40},
        {41,42,43,44,45,46,47,48,49,50},
        {51,52,53,54,55,56,57,58,59,60},
        {61,62,63,64,65,66,67,68,69,70},
        {71,72,73,74,75,76,77,78,79,80},
        {81,82,83,84,85,86,87,88,89,90},
        {91,92,93,94,95,96,97,98,99,100}


    };

    // Accessing two dimensional array using
    // nested for loops
    for(int i = 0; i < 10; ++i)
    {
        for(int j = 0; j < 10; ++j)
        {
            cout<< "test[" << i << "][" << j << "] = " << test[i][j] << endl;
        }
    }

            cout << "Enter an integer 10000bytes to 1000000bytes: " << endl;

            cin >> number;

            cout << "You entered " << number;

    return 0;
}

Output

test[0][0] = 10000b
test[0][1] = 20000b
test[1][0] = 110000b
test[1][1] = 120000b
test[2][0] = 3100000b
test[2][1] = 3200000b

 *Container1Array 10 Rows and 10 Columuns each element equal to 10000Byte Particles   (10k)

      C1      C2     C3     C4       C5       C6        C7       C8        C9        C10

R1  x[0][0] x[0][1] x[0][2] x[0][3]  x[0][4]  x[0][5]  x[0][6]   x[0][7]   x[0][8]  x[0][9]


R2  x[1][0] x[1][1] x[1][2] x[1][3]  x[1][4]                                        x[1][9]


R3  x[2][0] x[2][1] x[2][2] x[2][3]  x[2][4]                                        x[2][9]


R4  x[3][0]                                                                         x[3][9]


R5  x[4][0]                                                                         x[4][9]


R6  x[5][0]


R7  x[6][0]


R8  x[7][0]


R9  x[8][0]


R10 x[9][0]                                                                          x[9][9]


#include <iostream>
using namespace std;

int main ()
{
    for(;;)
    {
        cout << "Enter Ledger Transaction Cont1Acct1pay! NewAcct1bal!:" << endl;
        int num1 = 0, num2 = 0;
        cin >> num1;
        cin >> num2;

        cout << "Do you wish to correct the numbers ( y/n):";
        char changeNumbers = '\0';
        cin >> changeNumbers;

        if (changeNumbers == 'y')
            continue;

        cout << num1 << "x" << num2 << "=" << num1 - num2 << endl;
        cout << num1 << "-" << num2 << "=" << num1 - num2 << endl;

        cout << "Press x to exit or any other key to recalculate"<< endl;
        char userSelection = '\0';
        cin >> userSelection;


        if (userSelection == 'x')
            break;    // exit the infinite loop
    }

        cout << "New Acct1balCont1 Have a Nice Day Goodbye!" << endl;
        cout << "worldvisionvirtualbank@mail.com" << end1;
        cout << "Master Ledger Cont1Array!" << endl;


    return 0;


}


Output:

Example: Calculate Average of Numbers Using Arrays

#include <iostream>
using namespace std;

int main()
{
    int n, i;
    float num[100], sum=0.0, average;

    cout << "Enter the numbers of data: ";
    cin >> n;

    while (n > 100 || n <= 0)
    {
        cout << "Error! number should in range of (1 to 100)." << endl;
        cout << "Enter the number again: ";
        cin >> n;
    }

    for(i = 0; i < n; ++i)
    {
        cout << i + 1 << ". Enter number: ";
        cin >> num[i];
        sum += num[i];
    }

    average = sum / n;
    cout << "Average = " << average;

    return 0;
}

Output

Enter the numbers of data: 6
1. Enter number: 45.3
2. Enter number: 67.5
3. Enter number: -45.6
4. Enter number: 20.34
5. Enter number: 33
6. Enter number: 45.6
Average = 27.69


#include <iostream>
using namespace std;

int main()
{    
    int number;

    cout << "Enter an integer: ";
    cin >> number;

    cout << "You entered " << number;    
    return 0;
}

Output

Enter an integer: 23
You entered 23



https://www.programiz.com/cpp-programming/library-function/cmath/expm1

#include <iostream>
#include <cmath>

using namespace std;

int main()
{
	double x = 2.19, result;
	result = expm1(x);
	
	cout << "e^" << x << " - 1 = " << result << endl;
	
	return 0;
}

Output

e^2.19 - 1 = 7.93521

#include <ostream>
#include <cmath>


using namespace std;

int main()
{
    int = 2.7182;

    cout << "1 * 2.7182" << endl;

    return 0;
}

WVVB Check Master Ledger "Pay Master"

CryptoCurrency/Properties   BitBytes                                  0000001.0

World Vision Virtual Bank
worldvisionvirtualbank@mail.com                               __6/05/2017__ Date

ACCTPay to the
 order of___Mill Pond Village____________________________________!/ $_0975.00___
Nine Hundred Seventy Five****___________________________________________BitBytes
Store of Unit Value

World Vision Virtual Bank
WVVB
BitBytes

For_Rent June Apt. H14________________          __Michael E. Giannuzzi____________

https://github.com/Sherlock1x/ProjectBlueberries

END:








Furnace Not Working - The Most Common Fix

https://www.youtube.com/watch?v=3Jonl_TLkpE

20181213

